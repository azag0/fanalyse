ProgramUnit:
    EOL?
    Type? 'elemental'? type=UnitType name=ID ('(' parameters*=ID[','] ')')? ('result' '(' ID ')')? EOL
    imports=UseStatement*
    ('implicit' 'none' EOL)?
    declarations=DeclarationStatement*
    body=ExecutableStatement*
    ('contains' EOL
    contains*=ProgramUnit)?
    'end' UnitType ID? EOL
;

Type: TypeName ('*' INT | '(' (('len' '=')? (Expression | '*'))+ ')')?;
TypeName: /double *precision|integer|logical|character|real|complex/ | CustomTypeName;
CustomTypeName: 'type' '(' name=ID ')';
UnitType: /program|subroutine|module|function/;

UseStatement: 'use' module=ID (',' 'only' ':' names+=FunctionName[','])? EOL;

DeclarationStatement:
    ScopeDeclaration | InterfaceDeclaration | CustomTypeDeclaration |
    VariableDeclaration
;
ScopeDeclaration: scope='private' EOL | scope='public' '::' names+=FunctionName[','] EOL;
InterfaceDeclaration:
    'interface' FunctionName EOL
    ('module' 'procedure' funcs=ID EOL)+
    'end' 'interface' EOL
;
CustomTypeDeclaration:
    'type' '::' name=ID EOL
    attributes*=VariableDeclaration
    'end' 'type' ID? EOL
;
VariableDeclaration: type=Type (',' modifiers+=TypeModifier[','])? '::'? variables+=VariableNameDefault[','] EOL;
TypeModifier:
    'intent' '(' /inout|in|out/ ')' |
    'dimension' '(' dimensions+=DimensionSpec[','] ')' |
    /parameter|allocatable|optional|target|pointer|save/
;
VariableNameDefault: name=ID ('(' dimensions+=DimensionSpec[','] ')')? ('=' value=Expression)?;
DimensionSpec: (from=Expression? ':' to=Expression?) | to=Expression;
FunctionName: OperatorFunction | ID;
OperatorFunction: 'operator' '(' operator=CustomOperator ')';

ExecutableStatement:
    CallStatement | IfBlock | IfStatement | SelectBlock |
    DoBlock | ForallBlock | ForallStatement |
    WhereBlock | WhereStatement |
    AssociateStatement |
    AllocateStatement | DeallocateStatement |
    OpenStatement | WriteStatement | ReadStatement | CloseStatement |
    InquireStatement |
    PointerAssignment | Assignment | ('stop' INT? | /cycle|exit|return|continue/) EOL
;
CallStatement: 'call' subroutine=ID ('(' parameters*=Parameter[','] ')')? EOL;
IfBlock :
    'if' branches=Branch
    (/else *if/ branches=Branch)*
    ('else' branches=Branch)?
    'end' 'if' EOL
;
IfStatement: 'if' '(' condition=Expression ')' body=ExecutableStatement;
SelectBlock:
    /select *case/ '(' condition=Expression ')' EOL
    branches*=Case
    'end' 'select' EOL
;
DoBlock :
    'do' ('while' '(' condition=Expression ')' | ID '=' from=Expression ',' to=Expression (',' by=Expression)?)? EOL
    body=ExecutableStatement*
    'end' 'do' EOL
;
ForallBlock: 'forall' '(' iters+=IterSpec[','] ')' EOL body*=ExecutableStatement 'end' 'forall' EOL;
ForallStatement: 'forall' '(' iters+=IterSpec[','] ')' body=ExecutableStatement;
WhereBlock: 'where' '(' Expression ')' EOL body*=ExecutableStatement 'end' 'where' EOL;
WhereStatement: 'where' '(' Expression ')' body=ExecutableStatement;
AssociateStatement:
    'associate' '(' aliases+=Alias[','] ')' EOL
    body*=ExecutableStatement
    'end' 'associate' EOL
;
Alias: name=ID '=>' Expression;
AllocateStatement: 'allocate' '(' variables+=Parameter[','] ')' EOL;
DeallocateStatement: 'deallocate' '(' parameters+=Parameter[','] ')' EOL;
OpenStatement: 'open' '(' parameters*=Parameter[','] ')' EOL;
WriteStatement: 'write' '(' parameters*=Parameter[','] ')' args*=Expression[','] EOL;
ReadStatement: 'read' '(' ID ')' vars+=LHS[','] EOL;
CloseStatement: 'close' '(' parameters*=Parameter[','] ')' EOL;
InquireStatement: 'inquire' '(' parameters*=Parameter[','] ')' EOL;
PointerAssignment: pointer=LHS '=>' target=LHS EOL;
Assignment: target=LHS '=' value=Expression EOL;
LHS: VariableAccess;

Parameter: (name=ID '=')? value=Expression | value='*';
Branch: ('(' condition=Expression ')' 'then')? EOL body=ExecutableStatement*;
Case: 'case' ('(' case=CaseValue ')' | 'default') EOL body=ExecutableStatement*;
CaseValue: INT | STRING ;
IterSpec: itervar=ID '=' slice=Slice;
Format: Expression | '*';

Expression: operands=Term (operators=Operator operands=Term)*;
Term:
    FunctionCall | VariableAccess | Array | FLOAT_ | INT |
    STRING | BOOL_ | UnaryTerm | Complex | Parenthesised
;
FunctionCall: function=ID '(' parameters*=Parameter[','] ')';
VariableAccess: components=ArrayCall ('%' components=ArrayCall)*;
ArrayCall: variable=ID ('(' parameters*=Slice[','] ')')?;
Slice: (from=Expression? ':' to=Expression? (':' by=Expression)?) | to=Expression;
Array: '(/' members*=ArrayMember[','] '/)' | '[' members*=ArrayMember[','] ']';
ArrayMember: Iterator | Expression;
Iterator: '(' value=Expression ',' var=ID '=' from=Expression ',' to=Expression ')';
UnaryTerm: operator=Unary operand=Term;
Unary: /\.not\.|-/;
Parenthesised: '(' inner=Expression ')';
CustomOperator: /\.[a-z]+\./;
Operator: CustomOperator | /\/\/|>=|<=|\/=|==|>|<|\/|\+|\*\*|\*|-/;

BOOL_: /\.true\.|\.false\./;
FLOAT_: /-?(\d*\.\d+|\d+\.\d*|\d+)([de]-?\d+)?(_[a-z]+)?/;
Complex: '(' FLOAT_ ',' FLOAT_ ')';

Comment: /!.*$|& *(!.*)?\n *&?/;
EOL: (/[\n;]\s*/)*;
