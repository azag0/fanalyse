// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

File: EOL? units=ProgramUnit*;
ProgramUnit:
    (type=Type? 'recursive'? 'elemental'? 'pure'?)#
    unit=UnitType name=ID_ ('(' arguments*=ID_[','] ')')?
    ('result' '(' result=ID_ ')')? ('bind' '(' 'c' (',' 'name' '=' STRING )? ')')?
    EOL
    imports=UseStatement*
    ('implicit' (implicit='none' | implicit+=ImplicitType[',']) EOL)?
    declarations=DeclarationStatement*
    body=ExecutableStatement*
    ('contains' EOL
    contains*=ProgramUnit)?
    'end' (UnitType ID_?)? EOL
;
ImplicitType: type=TypeName ('*' INT)? '(' chars+=/[a-z](-[a-z])?/[','] ')';

Type: name=TypeName parameters=TypeParameters?;
TypeParameters:
    '*' (INT | '(' len=ExpressionOrStar ')') |
    '(' ((('kind' '=')? kind=Expression)?
    (('len' '=')? (len=Expression | '*' | ':'))?)#[','] ')'
;
TypeName:
    'double' ('precision' | 'complex') | 'integer' | 'logical' |
    'character' | 'real' | 'complex' | CustomTypeName | ProcedureTypeName
;
CustomTypeName: ('type' | 'class') '(' name=ID_ ')';
ProcedureTypeName: 'procedure' '(' name=ID_ ')';
UnitType: 'program' | 'subroutine' | 'module' | 'function';

UseStatement:
    'use' (',' 'intrinsic' '::')? module=ID_
    (',' rename+=Rename[','])?
    (',' 'only' ':' only+=Rename[','])?
    EOL
;
Rename: !'only' local=FunctionName ('=>' foreign=FunctionName)?;

DeclarationStatement:
    ScopeDeclaration | ModuleInterface | InterfaceBlock | CustomTypeDeclaration |
    ExternalDeclaration | SaveDeclaration | DimensionStatement | Equivalence |
    ParameterStatement | IncludeStatement | DataStatement | IntrinsicStatement |
    ImportStatement | CommonBlock | VariableDeclaration
;
ScopeDeclaration: scope=Scope ('::'? names+=FunctionName[','])? EOL;
Scope: 'private' | 'public';
ModuleInterface:
    'interface' name=FunctionName EOL
    ('module' 'procedure' functions+=ID_[','] EOL)+
    'end' 'interface' FunctionName? EOL
;
InterfaceBlock:
    'abstract'? 'interface' EOL
    headers+=ProgramUnit
    'end' 'interface' EOL
;
CustomTypeDeclaration:
    'type' (((',' scope=Scope)? (',' 'bind' '(' 'c' ')')?)# '::')? name=ID_ EOL
    attributes*=DeclarationStatement
    ('contains' EOL
    methods*=MethodDeclaration)?
    'end' 'type' ID_? EOL
;
ExternalDeclaration: 'external' '::'? names+=ID_[','] EOL;
SaveDeclaration: 'save' variables*=ID_[','] EOL;
DimensionStatement: 'dimension' variables+=VariableDefault[','] EOL;
ParameterStatement: 'parameter' '(' variables+=VariableDefault[','] ')' EOL;
IncludeStatement: 'include' file=STRING EOL;
DataStatement: 'data' data+=DataSpecification[','] EOL;
DataSpecification: names+=LHS[','] '/' values+=Expression[','] '/';
IntrinsicStatement: 'intrinsic' '::'? names+=ID_[','] EOL;
ImportStatement: 'import' '::'? names*=ID_[','] EOL;
CommonBlock: 'common' common=CommonSpecification+[','] EOL;
CommonSpecification: '/' name=ID_? '/' values=LHS+[','];
VariableDeclaration:
    type=Type (',' modifiers+=TypeModifier[','])? '::'?
    variables+=VariableDefault[',']
    EOL
;
TypeModifier:
    Intent | Dimension | 'parameter' | 'allocatable' | 'optional' |
    'target' | 'pointer' | 'save' | 'value' | 'public' | 'private' |
    'external' | 'protected'
;
Intent: 'intent' '(' intent=IntentSpec ')';
IntentSpec: /in *out/ | 'in' | 'out';
Dimension: 'dimension' '(' dimensions+=DimensionSpec[','] ')';
DimensionSpec: (from=Expression? ':' to=Expression?) | to=ExpressionOrStar;
VariableDefault:
    name=ID_ ('(' dimensions+=DimensionSpec[','] ')' | '*' INT)?
    ('=' value=Expression | '=>' 'null' '(' ')')?
;
FunctionName: OperatorFunction | ID_;
OperatorFunction: 'operator' '(' name=CustomOperator ')';
MethodDeclaration: 'procedure' ',' 'pass' '::' local=ID_ '=>' foreign=ID_ EOL;

ExecutableStatement:
    CallStatement | IfBlock | IfStatement | SelectBlock | DoBlock |
    DoStatement | ForallBlock | ForallStatement | WhereBlock |
    WhereStatement | AssociateStatement | AllocateStatement |
    DeallocateStatement | NullifyStatement | OpenStatement |
    WriteStatement | ReadStatement | CloseStatement | Backspace |
    Rewind | AssignStatement | Pause | InquireStatement | PrintStatement |
    FormatStatement | PointerAssignment | Assignment |
    ('stop' (STRING | INT)? | 'exit' ID_? | INT? 'continue' |
    'go' 'to' ('(' INT+[','] ')' ','?)? Expression | 'cycle' ID_? |
    INT? 'return') EOL
;
CallStatement: INT? 'call' call=LHS EOL;
IfBlock :
    (ID_ ':' | INT)? 'if' branches=Branch
    ('else' 'if' branches=Branch)*
    ('else' branches=DefaultBranch)?
    'end' 'if' ID_? EOL
;
IfStatement: INT? 'if' '(' condition=Expression ')' body=ExecutableStatement;
SelectBlock:
    'select' 'case' '(' condition=Expression ')' EOL
    branches*=Case
    'end' 'select' EOL
;
DoBlock:
    (ID_ ':')? 'do' ('while' '(' condition=Expression ')' |
        INT? ID_ '=' from=Expression ',' to=Expression (',' by=Expression)?)? EOL
    body=ExecutableStatement*
    'end' 'do' ID_? EOL
;
DoStatement:
    'do' INT ','? ID_ '=' from=Expression ',' to=Expression (',' by=Expression)?
    EOL
;
ForallBlock:
    'forall' '(' iters+=IterSpec[','] ')' EOL
    body*=ExecutableStatement 'end' 'forall' EOL
;
ForallStatement: 'forall' '(' iters+=IterSpec[','] ')' body=ExecutableStatement;
WhereBlock:
    'where' '(' where=Expression ')' EOL
    body*=ExecutableStatement
    ('elsewhere' EOL
    elsebody*=ExecutableStatement)?
    'end' 'where' EOL
;
WhereStatement: 'where' '(' where=Expression ')' body=ExecutableStatement;
AssociateStatement:
    'associate' '(' aliases+=Alias[','] ')' EOL
    body*=ExecutableStatement
    'end' 'associate' EOL
;
Alias: name=ID_ '=>' target=Expression;
AllocateStatement: 'allocate' '(' (Type '::')? variables+=Argument[','] ')' EOL;
DeallocateStatement: 'deallocate' '(' variables+=Argument[','] ')' EOL;
NullifyStatement: 'nullify' '(' variables+=LHS[','] ')' EOL;
OpenStatement: 'open' '(' parameters*=Argument[','] ')' EOL;
WriteStatement:
    'write' '(' parameters*=Argument[','] ')'
    ','? args*=ExpressionOrIterator[','] EOL
;
PrintStatement: 'print' format=Argument (',' args*=ExpressionOrIterator[','])? EOL;
FormatStatement: INT 'format' '(' FormatList ')' EOL;
ReadStatement: 'read' '(' parameters*=Argument[','] ')' ','? args*=ReadTarget[','] EOL;
CloseStatement: 'close' '(' parameters*=Argument[','] ')' EOL;
Backspace: 'backspace' '(' unit=Expression ')' EOL;
Rewind: 'rewind' unit=Expression EOL;
AssignStatement: 'assign' INT 'to' ID_ EOL;
Pause: 'pause' STRING EOL;
Equivalence: 'equivalence' '(' LHS+[','] ')' EOL;
InquireStatement: 'inquire' '(' parameters*=Argument[','] ')' variable=ID_? EOL;
PointerAssignment: pointer=LHS '=>' target=LHS EOL;
Assignment: INT? target=LHS '=' value=Expression EOL;

Branch: '(' condition=Expression ')' 'then' EOL body=ExecutableStatement*;
DefaultBranch: EOL body=ExecutableStatement*;
Case: 'case' ('(' case+=CaseValue[','] ')' | 'default') EOL body=ExecutableStatement*;
CaseValue: CaseSlice | Expression;
CaseSlice: from=Expression? ':' to=Expression?;
IterSpec: variable=ID_ '=' slice=Argument;
ReadTarget: LHS | Iterator;
ExpressionOrIterator: Expression | Iterator;
FormatList: (element=FormatExpression | ',')+;
FormatExpression: repeat=INT? desc=EditDescriptor;
EditDescriptor: STRING_ | NumberEditDescriptor | '/' | '(' FormatList ')';
NumberEditDescriptor: /[a-z0-9.]*/;

Expression: operands=Term (operators=Operator operands=Term)* !'=';
Term:
    LHS | Array | UnaryTerm | (INT_ &CustomOperator) | FLOAT_ | INT_ |
    STRING_ | BOOL_ | Complex | Parenthesised
;
LHS: components+=Call['%'];
Call: variable=ID_ ('(' arguments*=Argument[','] ')')? ('(' slice=Argument ')')?;
Argument: Slice | ExpressionOrStar | KeywordValue;
ExpressionOrStar: Expression | '*';
Slice: from=Expression? ':' to=Expression? (':' by=Expression)?;
KeywordValue: keyword=ID_ '=' value=ExpressionOrStar;
Array:
    '(/' elements*=ArrayMember[','] '/)' |
    '[' (Type '::')? elements*=ArrayMember[','] ']'
;
ArrayMember: Iterator | Expression;
Iterator:
    '(' values+=ExpressionOrIterator[','] ','
    varable=ID_ '=' from=Expression ',' to=Expression (',' by=Expression)? ')'
;
UnaryTerm: operator=Unary operand=Term;
Unary: /\.not\.|-|\+/;
Parenthesised: '(' expression=Expression ')';
CustomOperator: /\.[a-z]+\./;
Operator: CustomOperator | /\/\/|>=|<=|\/=|==|>|<|\/|\+|\*\*|\*|-/;

ID_: /[^_\d\W]\w*\b/;
BOOL_: /\.true\.|\.false\./;
FLOAT_: /-?(\d*\.\d+|\d+\.\d*|\d+)([de][-+]?\d+)?(_[0-9a-z_]+)?/;
INT_: /-?\d+(_[0-9a-z_]+)?/;
Complex: '(' FLOAT_ ',' FLOAT_ ')';
STRING_: MultiString | STRING;
MultiString: parts=STRING parts+=STRING;
// The MultiString is a hack that deals with two issues:
// 1. multline strings, which cannot be distinguished from linebreaks
// 2. escaping of a quote in fortran, which is incompatible with python

Comment: /!.*$|^#.*$|& *(!.*)?(\n[\t ]*(!.*)?$)*\n[\t ]*&?/;
EOL: (/[\n;]/)+;
